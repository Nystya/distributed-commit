// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package service

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CommitClient is the client API for Commit service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CommitClient interface {
	Prepare(ctx context.Context, in *TransactionRequest, opts ...grpc.CallOption) (*TransactionResponse, error)
	Commit(ctx context.Context, in *TransactionID, opts ...grpc.CallOption) (*TransactionResponse, error)
	Abort(ctx context.Context, in *TransactionID, opts ...grpc.CallOption) (*TransactionResponse, error)
	Get(ctx context.Context, in *Key, opts ...grpc.CallOption) (*DataResponse, error)
	GetStatus(ctx context.Context, in *TransactionID, opts ...grpc.CallOption) (*TransactionResponse, error)
	Fail(ctx context.Context, in *FailRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type commitClient struct {
	cc grpc.ClientConnInterface
}

func NewCommitClient(cc grpc.ClientConnInterface) CommitClient {
	return &commitClient{cc}
}

func (c *commitClient) Prepare(ctx context.Context, in *TransactionRequest, opts ...grpc.CallOption) (*TransactionResponse, error) {
	out := new(TransactionResponse)
	err := c.cc.Invoke(ctx, "/service.Commit/Prepare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commitClient) Commit(ctx context.Context, in *TransactionID, opts ...grpc.CallOption) (*TransactionResponse, error) {
	out := new(TransactionResponse)
	err := c.cc.Invoke(ctx, "/service.Commit/Commit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commitClient) Abort(ctx context.Context, in *TransactionID, opts ...grpc.CallOption) (*TransactionResponse, error) {
	out := new(TransactionResponse)
	err := c.cc.Invoke(ctx, "/service.Commit/Abort", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commitClient) Get(ctx context.Context, in *Key, opts ...grpc.CallOption) (*DataResponse, error) {
	out := new(DataResponse)
	err := c.cc.Invoke(ctx, "/service.Commit/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commitClient) GetStatus(ctx context.Context, in *TransactionID, opts ...grpc.CallOption) (*TransactionResponse, error) {
	out := new(TransactionResponse)
	err := c.cc.Invoke(ctx, "/service.Commit/GetStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commitClient) Fail(ctx context.Context, in *FailRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/service.Commit/Fail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommitServer is the server API for Commit service.
// All implementations must embed UnimplementedCommitServer
// for forward compatibility
type CommitServer interface {
	Prepare(context.Context, *TransactionRequest) (*TransactionResponse, error)
	Commit(context.Context, *TransactionID) (*TransactionResponse, error)
	Abort(context.Context, *TransactionID) (*TransactionResponse, error)
	Get(context.Context, *Key) (*DataResponse, error)
	GetStatus(context.Context, *TransactionID) (*TransactionResponse, error)
	Fail(context.Context, *FailRequest) (*empty.Empty, error)
	mustEmbedUnimplementedCommitServer()
}

// UnimplementedCommitServer must be embedded to have forward compatible implementations.
type UnimplementedCommitServer struct {
}

func (UnimplementedCommitServer) Prepare(context.Context, *TransactionRequest) (*TransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Prepare not implemented")
}
func (UnimplementedCommitServer) Commit(context.Context, *TransactionID) (*TransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Commit not implemented")
}
func (UnimplementedCommitServer) Abort(context.Context, *TransactionID) (*TransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Abort not implemented")
}
func (UnimplementedCommitServer) Get(context.Context, *Key) (*DataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedCommitServer) GetStatus(context.Context, *TransactionID) (*TransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatus not implemented")
}
func (UnimplementedCommitServer) Fail(context.Context, *FailRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Fail not implemented")
}
func (UnimplementedCommitServer) mustEmbedUnimplementedCommitServer() {}

// UnsafeCommitServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CommitServer will
// result in compilation errors.
type UnsafeCommitServer interface {
	mustEmbedUnimplementedCommitServer()
}

func RegisterCommitServer(s grpc.ServiceRegistrar, srv CommitServer) {
	s.RegisterService(&Commit_ServiceDesc, srv)
}

func _Commit_Prepare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommitServer).Prepare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.Commit/Prepare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommitServer).Prepare(ctx, req.(*TransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Commit_Commit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommitServer).Commit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.Commit/Commit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommitServer).Commit(ctx, req.(*TransactionID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Commit_Abort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommitServer).Abort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.Commit/Abort",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommitServer).Abort(ctx, req.(*TransactionID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Commit_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Key)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommitServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.Commit/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommitServer).Get(ctx, req.(*Key))
	}
	return interceptor(ctx, in, info, handler)
}

func _Commit_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommitServer).GetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.Commit/GetStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommitServer).GetStatus(ctx, req.(*TransactionID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Commit_Fail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommitServer).Fail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.Commit/Fail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommitServer).Fail(ctx, req.(*FailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Commit_ServiceDesc is the grpc.ServiceDesc for Commit service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Commit_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.Commit",
	HandlerType: (*CommitServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Prepare",
			Handler:    _Commit_Prepare_Handler,
		},
		{
			MethodName: "Commit",
			Handler:    _Commit_Commit_Handler,
		},
		{
			MethodName: "Abort",
			Handler:    _Commit_Abort_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Commit_Get_Handler,
		},
		{
			MethodName: "GetStatus",
			Handler:    _Commit_GetStatus_Handler,
		},
		{
			MethodName: "Fail",
			Handler:    _Commit_Fail_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "commit.proto",
}
